package RentalAnalysis;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

public class RentalAnalysis {
    static ArrayList<String> key = new ArrayList<String>();
    static Hashtable<String, Integer> numbers = new Hashtable<String, Integer>();
    private static Hashtable<String, Integer> searchFrequencies = new Hashtable<>();

    static int n = 1;
    static Scanner sc = new Scanner(System.in);
    static int R;
    static int[] right;

    private static AVLTreeII invertedIndex = new AVLTreeII();

    public RentalAnalysis() {
        System.out.println("***************************************************");
        System.out.println("****************RENTAL ANALYSIS******************");
        System.out.println("***************************************************");
        System.out.println("**************TEAM MEMBERS***************");
        System.out.println("\n		Aman Shaikh					   ");
        System.out.println("		Abubakar  				   ");
        System.out.println("		Naman Goyal		    		   ");
        System.out.println("		Mohammad Farhan		    		   ");
        System.out.println("\n***************************************************");
    }

    // Finding pattern using Boyer Moore method.
    public static int search1(String pat, String txt) {
        BoyerMoore b = new BoyerMoore(pat);
        int offset = b.search(txt);
        return offset;
    }

    public static void RentalAnalysis() {
        File dir = new File(System.getProperty("user.dir") + Constant.FILE_PATH);

        for (File f : dir.listFiles()) {
            if (f.getName().endsWith(".txt")) {
                f.delete();
            }
        }


        RentalAnalysis w = new RentalAnalysis();

//        System.out.println("\n\n Enter the URL you want to crawl");
//        String urlToCrawl = scan.nextLine();
//
//        String pattern = "^((https?://)|(www\\.))[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";
//
//        while(!Pattern.matches(pattern, urlToCrawl)){
//            System.out.println("\n\n Please enter a valid url (it should start with either https: or www.)");
//            System.out.println("\n\n Enter the URL you want to crawl");
//            urlToCrawl = scan.nextLine();
//        }

        Scanner scan = new Scanner(System.in);
        String choice = "y";
        String word;

        //word completion
        AVLTree cityTree = new AVLTree();
        loadCities(cityTree);

        System.out.println("\nSpecify the details of your search (e.g. city, house/apartment/condo, number of bedrooms, etc): ");
        System.out.print("City: ");
        String city = scan.nextLine();

        String suggestions = cityTree.autocomplete(city);

        if(suggestions.equalsIgnoreCase("No complete word can be found.")){
            System.out.println("Either it's complete word OR No complete word can be found.");
        }
        else {
            System.out.println("Word Completion Output: "+suggestions);
            city = suggestions;
        }

        // Data validation using regular expressions;
        // Validate the input for the 'type' variable (house/apartment/condo)
        String type;
        do {
            // Prompt the user for input
            System.out.print("\nHouse/Apartment/Condo (if you want to add multiple, enter it in a comma-separated manner): ");

            // Read the user input for 'type'
            type = scan.nextLine();
        } while (!type.matches("(?i)(apartment|house|condo)(,(apartment|house|condo))*"));
        // The loop continues until 'type' matches the pattern, which allows for a case-insensitive comma-separated list of 'apartment', 'house', or 'condo'.

        // Validate the input for the 'beds' variable (number of bedrooms)
        String beds;
        do {
            // Prompt the user for input
            System.out.print("\nNumber of bedrooms: ");

            // Read the user input for 'beds'
            beds = scan.nextLine();
        } while (!beds.matches("\\d+"));
        // The loop continues until 'beds' matches the pattern, which allows for one or more digits.


        Crawler.crawlZolo("https://zolo.ca/", city, type, beds);
        Crawler.crawlRentals("https://rentals.ca/", city, type, beds);

        Hashtable<String, Integer> occurrs = new Hashtable<String, Integer>();


        do {
            long fileNumber = 0;
            int occur = 0;
            int pg = 0;

            do {
                System.out.print("Enter word to search in crawled data: ");
                word = scan.nextLine();
            } while (!word.matches("\\w+"));

            try {
                File[] fileArray = dir.listFiles();

                    for (int i = 0; i < fileArray.length; i++) {
                        // Reset the AVL tree for each file
                        //inverted indexing and frequency count
                        invertedIndex.reset();

                        Scanner scanner = new Scanner(fileArray[i]);
                        while (scanner.hasNext()) {
                            String fileWord = scanner.next().toLowerCase(); // Convert to lowercase for case-insensitive indexing
                            invertedIndex.buildIndex(fileWord, i + 1); // i + 1 represents the file number
                        }
                        ArrayList<Integer> occurrences = invertedIndex.search(word);

                        System.out.println("Inverted Indexing Output:\nOccurrences of '" + word + "' in " + fileArray[i].getName() + " : " + occurrences.size());
                        scanner.close();
                    }

                    for (int i = 0; i < fileArray.length; i++) {
                    //Frequency count, Spell checking, Finding patterns using regular expressions.
                        occur = SearchWord.wordSearch(word, fileArray[i]);
                        occurrs.put(fileArray[i].getName(), occur);

                        searchFrequencies.put(word, searchFrequencies.getOrDefault(word, 0) + 1);

                        if (occur != 0)
                            pg++;
                        fileNumber++;
                    }

                if (pg == 0) {
                    System.out.println("\n\n\n\n\n\n---------------------------------------------------");
                    System.out.println("Given word not found!!");
                    System.out.println("Searching for similar words.....");
                    SearchWord.altWord(word);
                } else {
                    hashing(occurrs, pg);
                    Sorting.sortWebPagesByOccurrence(occurrs, pg);
                }

                System.out.println("\n\n Do you want to continue(y/n)??");
                choice = scan.nextLine();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } while (choice.equals("y"));
        System.out.println("\n***************************************************\n");
        System.out.println("	THANK YOU FOR USING OUR RENTAL ANALYSIS PROGRAM       ");
        System.out.println("\n***************************************************\n");
    }

    public static void main(String[] args) {
        RentalAnalysis.RentalAnalysis();
    }


    private static void loadCities(AVLTree cityTree) {
        try {
            File file = new File("C:\\Users\\amans\\Desktop\\MAC UWindsor\\Sem1\\ACC\\Project\\AccProject\\src\\main\\java\\RentalAnalysis\\canadiancities.txt");
            Scanner scanner = new Scanner(file);

            while (scanner.hasNextLine()) {
                String city = scanner.nextLine().trim();
                cityTree.root = cityTree.insert(cityTree.root, city);
            }

            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    static void hashing(Hashtable<String, Integer> hashtable, Integer page) {
//        System.out.println("-----------------------------------------------------------------------------");
//        System.out.printf("| %10s | %20s", "VALUE", "KEY");
//        System.out.println();
//        System.out.println("-----------------------------------------------------------------------------");
//        hashtable.forEach(
//                (k, v) -> {
//                    System.out.format("| %10s | %20s ", v, k);
//                    System.out.println();
//                });
//        System.out.println("-----------------------------------------------------------------------------");
        System.out.println("Search Frequencies:");
        System.out.printf("| %20s | %10s", "WORD", "FREQUENCY");
        System.out.println();
        System.out.println("--------------------------------------");
        searchFrequencies.forEach(
                (word, frequency) -> {
                    System.out.format("| %20s | %10s ", word, frequency);
                    System.out.println();
                });
        System.out.println("--------------------------------------");

    }
}
